plot(z)
a <- seq(0,4000,by=4)
b <- a/7
c <- a<2000 & a>1000
c <- a<2000 & a>1000
c <- a<2000 & a>1000
d <- LETTERS[1:10]
e <- NA
str(NA)
str(f)
str(e)
str(f)
addone(1)
addone(1)
}
addone <- function(x){
x+1
}
addone(1)
addone(2)
addone(1)
addone <- function(x){
y <- x+1
return(y)
}
addone(1)
addtwo <- function(x){
addtwo <- function(x){
y <- x+1
return(y)
}
addone(1)
addtwo(1)
addtwo <- function(x){
y <- x+1
return(y)
}
addtwo(1)
rexp(2)
}
addone <- function(x){
x+1
}
addone(1)
addtwo <- function(x){
y <- x+1
return(y)
}
addtwo(1)
rexp(2)
rexp(2)
rexp(2)
addtwo(1)
addtwo <- function(x){
y <- x+1
return(y)
}
addtwo(1)
rexp(2)
addtwo(1)
addtwo(1)
addtwo(1,2)
addtwo(1,2)
addtwo(1)
addtwo(3)
y <- -x+1+a
return(y)
}
addtwo(3)
addtwo <- function(a,b,c,x){
y <- -x+1+a
return(y)
}
addtwo(3)
addtwo <- function(a,b,c,x){
y <- -x+1
return(y)
}
addtwo(3)
hello = function(input){
is.integer(input)
}
hello(10)
x <- runif(10) #runif(n) generates n numbers randomly picked between 0 and 10
y <- runif(10)
z <- runif(10)
h <- runif(10)
k <- runif(10)
h <- runif(10)
k <- runif(10)
A <- rbind(x,y,z,h,k)
str(A)
A <- matrix(c(x,y,z,h,k),nrow=10)
A
x <- runif(5)
dim(x)
dim(x) <- c(10,5)
x
x[,'A']
dim(x)
dim(x) <- c(10,5)
x
x[,'A']
A <- matrix(c(x,y,z,h,k),nrow=10)
A
x[,'A']
A=cbind(c(1,0),c(1,1))
B=A+1
A
B
library(ISLR)
$$
= \frac {\frac {e^{\beta_0 + \beta_1 X}} {1 + e^{\beta_0 + \beta_1 X}}}
{1 - \frac {e^{\beta_0 + \beta_1 X}} {1 + e^{\beta_0 + \beta_1 X}}}
= \frac {\frac {e^{\beta_0 + \beta_1 X}} {1 + e^{\beta_0 + \beta_1 X}}}
{1 - \frac {e^{\beta_0 + \beta_1 X}} {1 + e^{\beta_0 + \beta_1 X}}}
(exp(-6+0.05*40+3.5))/(1+exp(-6+0.05*40+3.5))
log(1)
6-3.5
2.5/0.05
library(ISLR)
attach(Weekly)
Weekly
plot(Weekly)
summary(Weekly)
cor(Weekly)
cor(Weekly[,-9])
glm.fits = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5, family='binomial')
summary(glm.fits)
glm.Direction=Direction
glm.Direction
dim(glm.Direction)
glm.probs = predict(glm.fits,type='response')
glm.prob
glm.probs
contrasts(Direction)
dim(glm.probs)
dims(glm.probs)
glm.probs
glm.pred = rep('Down',1089)
glm.pred[glm.probs>.5]='Up'
table(Direction,glm.pred)
glm.probs = predict(glm.fit,type='response')
glm.probs = predict(glm.fits,type='response')
glm.pred = rep('Down',length(glm.probs))
glm.pred[glm.probs>.5] = 'Up'
table(Diection,glm.pred)
table(Direction,glm.pred)
glm.fits2 = glm(Direction~Lag2,family='binomial')
train.910 = (Year<2009)
train.910
Weekly.910=Weekly[train.910]
Weekly.910=Weekly[train.910,]
Weekly.910
Direction.910=Direction[!train]
Weekly.910=Weekly[!train.910,]
Weekly.910
Direction.910=Direction[!train.910]
Weekly.910
Weekly
glm.fits2
glm.fits2 = glm(Direction~Lag2,family='binomial',subset=train.910)
glm.probs=predict(glm.fits2,Weekly.910,type='response')
glm.pred=rep('Down',length(glm.probs)
glm.pred=rep('Down',length(glm.probs))
glm.pred[glm.probs>0.5]='Up'
table(glm.pred,Direction.910)
lda.fit=lda(Direction~Lag2,subset=train)
library(MASS)
lda.fit=lda(Direction~Lag2,subset=train)
lda.fit=lda(Direction~Lag2,subset=train.910)
lda.pred=predict(lda.fit, Direction.910)
table(lda,class,Direction.910)
table(lda.pred$class,class,Direction.910)
lda.pred$class
lda.pred
names(lda.pred)
table(lda.pred$class,Direction.910)
length(Direction.910)
length(lda.pred$class)
lda.pred=predict(lda.fit, Direction.910)
length(lda.predict)
length(lda.pred)
lda.pred
names(lda.pred)
dim(lda.pred)
table(lda.pred$class,Direction.910)
lda.pred
table(lda.pred$class,Weekly.910)
lda.pred=predict(lda.fit, Weekly.910)
lda.class=lda.pred$class
table(lda.class,Direction.910)
qda.fit=qda.fit(Direction~Lag2,subset=[!train.910])
qda.fit=qda.fit(Direction~Lag2,subset=[!train])
qda.fit=qda.fit(Direction~Lag2,subset=train)
library(MASS)
qda.fit=qda.fit(Direction~Lag2,subset=train)
qda.fit=qda(Direction~Lag2,subset=train)
train.910
qda.fit=qda(Direction~Lag2,subset=train910)
qda.fit=qda(Direction~Lag2,subset=train.910)
qda.predict=predict(qda.fit,Weekly.910)
names(qda.predict)
qda.class=qda.pred$class
qda.class=qda.predict$class
table(qda.class,Direction.910)
library(class)
train.X=Lag2[train,]
train.X=Lag2[train.910,]
Lag2
train.X=Lag2[train.910,]
train.X=cbind(Lag2)[train.910,]
train.x
train.X
test.X=cbind(Lag2)[!train.910,]
train.Direction=Direction[train.910]
set.seed(1)
knn.pred=knn(train.X,test.X,train.Direction,k=1)
train.X
length(train.X)
length(test.X)
shape(train.X)
dim(train.X)
test.X
train.Direction=Direction[!train.910]
knn.pred=knn(train.X,test.X,train.Direction,k=1)
length(train.X)
length(train.Direction)
train.Direction=Direction[!train.910]
train.Direction
train.Direction=Direction[train.910]
length(train.Direction)
knn.pred=knn(train.X,test.X,train.Direction,k=1)
help(knn)
knn.pred=knn(train.X,test.X,train.Direction,k=1)
dim(Weekly)
dim(train.X)
dim(test.X)
help(cbind)
train.X
test.X
dim(train.X)==dim(test.X)
help("as.matrix")
train.X = as.matrix(Lag2[train.910])
train.X
test.X = as.matrix(Lag2[!train.910])
test.X
dim(train.X)
set.seed(!)
set.seed(1)
knn.pred=knn(train.X,test.X,train.Direction,k=1)
table(knn.pred,Direction.910)
attach(Auto)
names(Auto)
median(mpg)
dim(mpg)
dim(Auto)
mpg01=rep('0',392)
mpg01[mpg>median(mpg)]=1
mpg01
help(data.frame())
help("data")
library(ISLR)
set.seed(1)
data(Auto)
dim(Auto)
train=sample(392, 196)
help(data)
help(attach)
help(data)
train
?sample
sample
train
lm.fit=lm(mpg~horsepower, subset=train)
data(Auto)
lm.fit=lm(mpg~horsepower, subset=train)
lm.fit=lm(mpg~horsepower, data=Auto, subset=train)
lm.fit=lm(mpg~horsepower, subset=train)
attach(Auto)
lm.fit=lm(mpg~horsepower, subset=train)
?attach
predict(lm.fit)
predict(lm.fit, data=Auto)
mpg-predict(lm.fit)
(mpg-predict(lm.fit))[-train]
mean((mpg-predict(lm.fit))[-train]^2)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
(mpg-predict(lm.fit,Auto))[-train]^2
(mpg-predict(lm.fit))[-train]^2
(mpg-predict(lm.fit, Auto))[-train]^2
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2), subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
library(boot0)
library(boot)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err
cv.err=cv.glm(Auto,glm.fit)
?rep
cv.error=rep(0,5)
cv.error
for(i in 1:5){}
for(i in 1:5){
glm.fit=glm(mpg~poly(horsepower, i),data=Auto)
cv.error[i]=cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10=rep(0,10)
for(i in 1:10){
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i]=cv.glm(Auto, glm.fit, k=10)%delta[1]
for(i in 1:10){
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i]=cv.glm(Auto, glm.fit, K=10)%delta[1]
set.seed(17)
cv.error.10=rep(0,10)
cv.error.10
for (i in 1:10){
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i]=cv.glm(Auto, glm.fit, K=10)%delta[1]
set.seed(17)
cv.error.10=rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i]=cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
alpha.fn=function(data,index){
alpha.fn=function(data,index) {
}
}
alpha.fn=function(data,index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
akoha.fn(Portfolio, sample(100,100,replace=T))
alpha.fn(Portfolio, sample(100,100,replace=T))
boot(Portfolio, alpha.fn,R=1000)
boot(Portfolio, alpha.fn,R=100000)
(doc <- lapply(list.files(), readlines))
(doc <- lapply(list.files(), readLines))
warnings()
library(stringr)
# read in original text
( doc <- lapply( list.files(), readLines ) )
setwd("data/")
setwd("data")
# read in original text
( doc <- lapply( list.files(), readLines ) )
#(doc <- lapply(list.files(), readLines))
#(doc <- lapply(list.files(), readLines))
#(doc <- lapply(list.files(), readLines))
#(doc <- lapply(list.files(), readLines))
#(doc <- lapply(list.files(), readLines))
source('~/Desktop/SUTD/Capstone/capstonepercy/nlp/text-similarity/JaccardSimilarity/text-similarity.R', echo=TRUE)
source('~/Desktop/SUTD/Capstone/capstonepercy/nlp/text-similarity/JaccardSimilarity/text-similarity.R', echo=TRUE)
source('~/Desktop/SUTD/Capstone/capstonepercy/nlp/text-similarity/JaccardSimilarity/text-similarity.R', echo=TRUE)
source('~/Desktop/SUTD/Capstone/capstonepercy/nlp/text-similarity/JaccardSimilarity/text-similarity.R', echo=TRUE)
install.packages("dplyr")
source('~/Desktop/SUTD/Capstone/capstonepercy/nlp/text-similarity/JaccardSimilarity/text-similarity.R', echo=TRUE)
install.packages("proxy")
versio
version
version()
version
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
##########################
## USEFUL FUNCTION in R ##
##########################
x<-c(1,2,3)
y<-(4,5,6)
y<-c(4,5,6)
x*y[1:2]
?tapply
# SAPPLY/LAPPLY
?sapply
# APPLY func: return a vector obtained by appling a function to margins of an array or matrix
# APPLY must execute over a range (compared to SAPPLY and LAPPLY)
# 2 refers to column
# 1 refers to row
?apply
##########################
## USEFUL FUNCTION in R ##
##########################
x<-c(1,2,3)
?solve
# list functions like a dictionary
karthik <- list(age=30,sex="M",child.ages=c(4,4))
karthik$age
karthik$child.ages
# you can combine lists to form a dataframe
kim <- list(age=25,sex="M",child.ages=c(2,0))
df<-data.frame(names=c("karthik","kim"), ages=c(30,25), child.age1=c(4,2), child.age2=c(2,0))
data.frame(c(karthik,kim))
# list functions like a dictionary
karthik <- list(age=30,sex="M",child.ages=c(4,4))
# you can combine lists to form a dataframe
kim <- list(age=25,sex="M",child.ages=c(2,0))
data.frame(c(karthik,kim))
data.frame(karthik,kim)
data.frame(c(karthik, kim))
?t.test
geom_smoo
geom_smooth()
?geom_smooth()
library(ggplot2)
?geom_point
?geom_smooth
setwd("Desktop/SUTD/Term 8 (SUTD)/40.220 - The Analytics Edge/Dataset/")
### QUESTION 1 ###
# part (a)
auto <- read.csv("Auto.csv")
summary(auto)
str(auto)
auto$horsepower = as.numeric(as.character(auto$horsepower))
model1 <- lm(mpg~horsepower, data=auto)
summary(model1)
### QUESTION 1 ###
# part (a)
auto <- read.csv("Auto.csv")
summary(auto)
str(auto)
auto$horsepower = as.numeric(as.character(auto$horsepower))
### QUESTION 1 ###
# part (a)
auto <- read.csv("Auto.csv")
summary(auto)
head(auto$horsepower)
View(auto$horsepower)
auto$horsepower = as.numeric(as.character(auto$horsepower))
View(auto$horsepower)
auto$horsepower = as.numeric(as.character(auto$horsepower))
View(auto$horsepower)
auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
is.na(auto$horsepower)
auto$horsepower[is.na(auto$horsepower),]
auto[is.na(auto$horsepower),]
auto$horsepower[is.na(auto$horsepower)]
auto$horsepower[!is.na(auto$horsepower)]
auto[!is.na(auto$horsepower)]
auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
auto[!is.na(auto$horsepower),]
is.na(auto$horsepower)
model2 <- lm(mpg~horsepower, data=auto[!is.na(auto$horsepower)])
### QUESTION 1 ###
# part (a)
auto <- read.csv("Auto.csv")
summary(auto)
str(auto)
auto$horsepower = as.numeric(as.character(auto$horsepower))
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
model1 <- lm(mpg~horsepower, data=auto)
model2 <- lm(mpg~horsepower, data=auto[!is.na(auto$horsepower),])
summary(model1)
summary(model1)
summary(model2)
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
str(auto)
str(auto[!is.na(auto$horsepower),])
### QUESTION 1 ###
# part (a)
auto <- read.csv("Auto.csv")
View(auto$horsepower)
auto$horsepower = as.numeric(as.character(auto$horsepower))
model1 <- lm(mpg~horsepower, data=auto)
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
!is.na(auto$horsepower),
str(auto)
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
head(!is.na(auto$horsepower),)
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
head(is.na(auto$horsepower),)
#is.na(auto$horsepower)
#auto[!is.na(auto$horsepower),]
#auto$horsepower = auto$horsepower[is.na(auto$horsepower),]
is.na(auto$horsepower)
model2 <- lm(mpg~horsepower, data=auto[!is.na(auto$horsepower),])
model1 <- lm(mpg~horsepower, data=auto)
model2 <- lm(mpg~horsepower, data=auto[!is.na(auto$horsepower),])
summary(model1)
summary(model2)
summary(model1)
summary(model2)
str(auto)
str(auto[!is.na(auto$horsepower),])
model1 <- lm(mpg~horsepower+mpg, data=auto)
model1 <- lm(mpg~horsepower+cyl, data=auto)
str(auto)
model1 <- lm(mpg~horsepower+cylinders, data=auto)
summary(model1)
model1 <- lm(mpg~., data=auto)
summary(model1)
model1 <- lm(mpg~horsepower, data=auto)
summary(model1)
